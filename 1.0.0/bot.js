// Bot settings
const Discord = require('discord.js');
const bot = new Discord.Client({
  intents: ['GUILDS', 'GUILD_MESSAGES', 'GUILD_MEMBERS', 'DIRECT_MESSAGES'],
  presence: {
    status: 'dmd',
    activities: [
      {
        name: 'Sabaton',
        type: 2,
      },
    ],
  },
});

const prefix = '!';
const lineColor = '0xad1914';
const footerText = 'Opeks powered by –û—Ä—Ä–∏–Ω';
const ownerID = process.env.OWNER_ID;
const logChannel = process.env.LOG_CHANNEL;

const superagent = require('superagent');
const pack = require('./package.json');
require('events').EventEmitter.defaultMaxListeners = Infinity;

// Database connection
const data = require('./database.json');
const joke = data.joke;
const maps = data.maps;
const flags = data.flags;

// Bot connection
bot.login(process.env.TOKEN);

// Ordinary functions
const getRandomInt = (max) => Math.floor(Math.random() * Math.floor(max));
const getRandArrIndex = (arr) => Math.floor(Math.random() * arr.length);
const getRandArrElement = (arr) => arr[getRandArrIndex(arr)];
const logToChannel = (msg) => bot.channels.cache.get(logChannel).send(msg);
const formatDate = (date) =>
  date.toLocaleDateString('ru', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
    hour: 'numeric',
    minute: 'numeric',
    second: 'numeric',
  });
const triggerCommand = (message, command) =>
  message.content.startsWith(prefix) &&
  command === message.content.split(' ')[0].slice(1) &&
  !message.author.bot;

// !say
bot.on('messageCreate', async (message) => {
  if (triggerCommand(message, 'say') && message.author.id === ownerID) {
    await message.delete().catch((o_O) => {
      console.log(o_O);
    });
    message.channel.send(message.content.slice(5));
  }
});

// !invite
bot.on('messageCreate', async (message) => {
  if (triggerCommand(message, 'invite')) {
    const inviteButton = new Discord.MessageActionRow().addComponents(
      new Discord.MessageButton()
        .setLabel('Invite')
        .setStyle('LINK')
        .setURL(
          'https://discord.com/api/oauth2/authorize?client_id=672043257219252224&permissions=8&scope=bot'
        )
    );
    message.channel.send({
      content:
        'https://tenor.com/view/bots-hobots-buzz-lightyear-toy-story-woody-gif-17120878',
      components: [inviteButton],
    });
  }
});

// !help
bot.on('messageCreate', async (message) => {
  if (triggerCommand(message, 'help')) {
    const helpEmbed = new Discord.MessageEmbed()
      .setColor(lineColor)
      .setTitle('Opeks')
      .setThumbnail(
        bot.user.displayAvatarURL({
          dynamic: true,
          size: 1024,
        })
      )
      .setTimestamp()
      .setFooter(footerText)
      .addFields(
        {
          name: '–ë–æ—Ç —Å–æ–∑–¥–∞–Ω',
          value: '29 —è–Ω–≤–∞—Ä—è 2020 –≤ 11:39:58 (UTC)',
        },
        {
          name: '–ù–∞–ø–∏—Å–∞–Ω –Ω–∞',
          value: `Node.js: v${pack.engines.node}\nDiscord.js: v${pack.dependencies['discord.js']}`,
        },
        {
          name: '–•–æ—Å—Ç–∏–Ω–≥',
          value: process.env.HOSTING,
        }
      );
    message.channel.send({
      content: '–ü—Ä–∏–≤–µ—Ç, —è Opeks! –ß–µ–º –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω?',
      embeds: [helpEmbed],
    });
  }
});

// !roll
bot.on('messageCreate', async (message) => {
  if (triggerCommand(message, 'roll')) {
    const args = message.content.split(' ').slice(1);
    const min = isNaN(args[0])
      ? !args[0]
        ? 1
        : args[0].split('-')[0] != args[0]
        ? Number(args[0].split('-')[0])
        : 1
      : 1;
    const max = isNaN(args[0])
      ? !args[0]
        ? 20
        : args[0].split('-')[0] != args[0]
        ? Number(args[0].split('-')[1])
        : 20
      : Number(args[0]);
    const result = getRandomInt(max - min) + min;

    const mods = new Array();
    var finalResult = result;
    for (let arg of args.slice(1)) {
      if (!isNaN(arg)) {
        finalResult += Number(arg);
        mods.push(arg);
      } else break;
    }

    const rollEmbed = new Discord.MessageEmbed()
      .setColor(lineColor)
      .setDescription(`**${result}**`)
      .setTimestamp()
      .setFooter(footerText);

    max == min
      ? rollEmbed.setTitle(`:game_die: –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ ${max} :smile:`)
      : rollEmbed.setTitle(`:game_die: –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç ${min} –¥–æ ${max}`);

    if (result === max) {
      rollEmbed.setImage(
        'https://media.discordapp.net/attachments/664491015914258460/824896135902134283/Rickrolling.gif'
      );
    }

    if (finalResult !== result) {
      rollEmbed.addFields(
        {
          name: ':heavy_plus_sign: –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã:',
          value: `**${mods.join(' ')}**`,
        },
        {
          name: ':gem: –ò—Ç–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:',
          value: `**${finalResult}**`,
        }
      );
    }

    message.channel.send({
      embeds: [rollEmbed],
    });
  }
});

// !–∫—É–±–∏–∫
bot.on('messageCreate', async (message) => {
  if (triggerCommand(message, '–∫—É–±–∏–∫')) {
    let number = message.content.split(' ').slice(1)[0];
    let results = [];
    let sum = 0;
    let result;
    if (number > 1 && number < 101) {
      for (let i = 0; i < number; i++) {
        result = getRandomInt(6) + 1;
        sum += result;
        if (result === 1) {
          results[i] = ':one:';
        }
        if (result === 2) {
          results[i] = ':two:';
        }
        if (result === 3) {
          results[i] = ':three:';
        }
        if (result === 4) {
          results[i] = ':four:';
        }
        if (result === 5) {
          results[i] = ':five:';
        }
        if (result === 6) {
          results[i] = ':six:';
        }
      }
      message.channel.send(
        `–ë—Ä–æ—à–µ–Ω–æ –∫—É–±–∏–∫–æ–≤: ${Math.ceil(number)}\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã: ${results.join(
          ' '
        )}\n–°—É–º–º–∞: ${sum}`
      );
    }
    if (number === 1 || !number) {
      let result = getRandomInt(6) + 1;
      if (result === 1) {
        result = ':one:';
      }
      if (result === 2) {
        result = ':two:';
      }
      if (result === 3) {
        result = ':three:';
      }
      if (result === 4) {
        result = ':four:';
      }
      if (result === 5) {
        result = ':five:';
      }
      if (result === 6) {
        result = ':six:';
      }
      message.channel.send(`–ë—Ä–æ—à–µ–Ω –∫—É–±–∏–∫. –†–µ–∑—É–ª—å—Ç–∞—Ç: ${result}`);
    }
  }
});

// question
bot.on('messageCreate', async (message) => {
  if (message.author.bot) return;
  if (message.mentions.users.first() === bot.user) {
    if (message.content[message.content.length - 1] === '?') {
      let w = getRandomInt(100) + 1;
      let answer;
      if (w <= 50) {
        answer = [
          '–î–∞!',
          '–û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ, –¥–∞!',
          '–î–∞, –∫–æ–Ω–µ—á–Ω–æ!',
          '–î–∞, —è—Å–Ω–æ –¥–µ–ª–æ!',
          '–û–¥–Ω–æ–∑–Ω–∞—á–Ω–æ.',
          '–ö–æ–Ω–µ—á–Ω–æ!',
          '–î–∞. –ê –∫–∞–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–Ω–∞—á–µ?',
        ];
      } else {
        answer = [
          '–ù–µ—Ç!',
          '–û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ, –Ω–µ—Ç!',
          '–ù–µ—Ç, –∫–æ–Ω–µ—á–Ω–æ!',
          '–ù–∏ –≤ –∫–æ–µ–º —Å–ª—É—á–∞–µ.',
          '–Ø —Ç–∞–∫ –Ω–µ –¥—É–º–∞—é.',
          '–û—Ç–≤–µ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª–µ–Ω.',
          '–° —á–µ–≥–æ? –ù–µ—Ç, –∫–æ–Ω–µ—á–Ω–æ.',
        ];
      }
      message.reply(getRandArrElement(answer));
    }
  }
});

// !chance
bot.on('messageCreate', async (message) => {
  if (triggerCommand(message, 'chance')) {
    let args = message.content.split(' ').slice(1);
    let chance;
    let action;
    if (isNaN(args[0])) {
      chance = 50;
      action = args.join(' ');
    } else {
      chance = args[0];
      action = args.slice(1).join(' ');
    }
    let w = getRandomInt(100) + 1;
    let answer;
    if (w <= chance) {
      answer = [
        '–î–∞!',
        '–û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ, –¥–∞!',
        '–î–∞, –∫–æ–Ω–µ—á–Ω–æ!',
        '–û–¥–Ω–æ–∑–Ω–∞—á–Ω–æ.',
        '–ü–æ—á–µ–º—É –±—ã –∏ –Ω–µ—Ç?',
        '–ö–æ–Ω–µ—á–Ω–æ!',
        '–î–∞. –ê –∫–∞–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–Ω–∞—á–µ?',
      ];
    } else {
      answer = [
        '–ù–µ—Ç!',
        '–û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ, –Ω–µ—Ç!',
        '–ù–µ—Ç, –∫–æ–Ω–µ—á–Ω–æ!',
        '–ù–∏ –≤ –∫–æ–µ–º —Å–ª—É—á–∞–µ.',
        '–Ø —Ç–∞–∫ –Ω–µ –¥—É–º–∞—é.',
        '–û—Ç–≤–µ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª–µ–Ω.',
        '–° —á–µ–≥–æ? –ù–µ—Ç, –∫–æ–Ω–µ—á–Ω–æ.',
      ];
    }
    const chanceEmbed = new Discord.MessageEmbed()
      .setColor(lineColor)
      .setTitle('üé≤ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è')
      .setTimestamp()
      .setFooter(footerText)
      .addFields(
        {
          name: ':grey_question: –°–æ–±—ã—Ç–∏–µ:',
          value: action,
        },
        {
          name: ':scales: –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É–¥–∞—á–∏:',
          value: `${chance} %`,
        },
        {
          name: ':ballot_box_with_check: –†–µ–∑—É–ª—å—Ç–∞—Ç:',
          value: getRandArrElement(answer),
        }
      );
    message.channel.send({
      embeds: [chanceEmbed],
    });
  }
});

// !special (Fallout)
bot.on('messageCreate', async (message) => {
  if (triggerCommand(message, 'special')) {
    const specialEmbed = new Discord.MessageEmbed()
      .setColor(lineColor)
      .setTitle('S.P.E.C.I.A.L.')
      .setDescription('–°–ª—É—á–∞–π–Ω–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –¥–ª—è –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞')
      .setTimestamp()
      .setFooter(footerText)
      .addFields(
        {
          name: ':muscle: –°–∏–ª–∞:',
          value: `**${getRandomInt(10) + 1}**`,
        },
        {
          name: ':eyes: –í–æ—Å–ø—Ä–∏—è—Ç–∏–µ:',
          value: `**${getRandomInt(10) + 1}**`,
        },
        {
          name: ':man_running: –í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å:',
          value: `**${getRandomInt(10) + 1}**`,
        },
        {
          name: ':sunglasses: –•–∞—Ä–∏–∑–º–∞:',
          value: `**${getRandomInt(10) + 1}**`,
        },
        {
          name: ':brain: –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç:',
          value: `**${getRandomInt(10) + 1}**`,
        },
        {
          name: ':cartwheel: –õ–æ–≤–∫–æ—Å—Ç—å:',
          value: `**${getRandomInt(10) + 1}**`,
        },
        {
          name: ':unicorn: –£–¥–∞—á–∞:',
          value: `**${getRandomInt(10) + 1}**`,
        }
      );
    message.channel.send({
      embeds: [specialEmbed],
    });
  }
});

// !joke (jokes from the S.T.A.L.K.E.R. game)
bot.on('messageCreate', async (message) => {
  if (triggerCommand(message, 'joke')) {
    const value = getRandArrIndex(joke);
    const jokeEmbed = new Discord.MessageEmbed()
      .setColor(lineColor)
      .setTitle('–í–Ω–∏–º–∞–Ω–∏–µ, –∞–Ω–µ–∫–¥–æ—Ç!')
      .setDescription(joke[value])
      .setTimestamp()
      .setFooter(footerText);
    message.channel.send({
      embeds: [jokeEmbed],
    });
  }
});

// !rickroll meme
bot.on('messageCreate', async (message) => {
  if (triggerCommand(message, 'rickroll')) {
    message.channel.send(
      'https://media.discordapp.net/attachments/664491015914258460/824896135902134283/Rickrolling.gif'
    );
  }
});

// sends random local emoji
bot.on('messageCreate', async (message) => {
  if (getRandomInt(300) === 50 && !message.author.bot) {
    let emoji = message.guild.emojis.cache.random();
    message.channel.send('<:' + emoji.name + ':' + emoji.id + '>');
  }
});

// !clean
bot.on('messageCreate', async (message) => {
  if (triggerCommand(message, '—á–∏—Å—Ç–∫–∞')) {
    let messageArray = message.content.split(' ');
    let args = messageArray.slice(1);
    let amount = parseInt(args[0]) + 1;
    let messCount = args[0];
    if (isNaN(amount)) {
      return message.reply(
        '–≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å.'
      );
    }
    if (amount <= 1 || amount > 100) {
      return message.reply('–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 99.');
    }
    if (!message.member.permissions.has('MANAGE_MESSAGES')) {
      return message.reply('–≤–∞–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è.');
    }
    message.channel.bulkDelete(amount, true);
    message.channel
      .send(`–£–¥–∞–ª–µ–Ω–æ ${messCount} —Å–æ–æ–±—â–µ–Ω–∏–π!`)
      .then((msg) => setTimeout(() => msg.delete(), 5000));
    logToChannel(
      `${message.author.username} —É–¥–∞–ª–∏–ª ${amount - 1} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ ${
        message.channel.isThread()
          ? `—Ç—Ä–µ–¥–µ ¬´${message.channel.name}¬ª –∫–∞–Ω–∞–ª–∞ #${message.channel.parent.name}`
          : `–∫–∞–Ω–∞–ª–µ #${message.channel.name}`
      } (${message.guild}).`
    );
  }
});

// !mute
bot.on('messageCreate', async (message) => {
  if (triggerCommand(message, 'mute')) {
    let args = message.content.split(' ').slice(1);
    let mutedMember = message.guild.members.cache.get(
      message.guild.members.cache.find(
        (m) => m.user.username === args[0] || m.id === args[0]
      ).id || message.mentions.users.first().id
    );
    if (!mutedMember)
      return message.channel.send('–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    if (
      !message.member.permissions.has('MANAGE_ROLES') &&
      message.author.id !== mutedMember.id
    )
      return message.channel.send('–£ —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ');
    if (
      mutedMember.permissions.has('MANAGE_MESSAGES') &&
      message.author.id !== mutedMember.id
    )
      return message.channel.send('–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–≥–ª—É—à–µ–Ω');
    let reason = args.slice(1).join(' ');
    let muterole = message.guild.roles.cache.find((r) => r.name === '–ó–∞–≥–ª—É—à–µ–Ω');
    if (!muterole) {
      muterole = await message.guild.roles.create({
        data: {
          name: '–ó–∞–≥–ª—É—à–µ–Ω',
          color: 0x607d8d,
        },
      });
    }
    mutedMember.send(
      `${message.author.username} –∑–∞–≥–ª—É—à–∏–ª –≤–∞—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ ¬´${message.guild}¬ª –ø–æ –ø—Ä–∏—á–∏–Ω–µ: ${reason}`
    );
    logToChannel(
      `${message.author.username} –∑–∞–≥–ª—É—à–∏–ª ${mutedMember.user.username} –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ ¬´${message.guild}¬ª –ø–æ –ø—Ä–∏—á–∏–Ω–µ: ${reason}`
    );
    await mutedMember.roles.add(muterole.id);
    const muteEmbed = new Discord.MessageEmbed()
      .setColor(lineColor)
      .setTitle('–ú—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
      .setTimestamp()
      .setFooter(footerText)
      .addFields(
        {
          name: '–ó–∞–≥–ª—É—à–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:',
          value: mutedMember.user.tag,
        },
        {
          name: '–ë—ã–ª –∑–∞–≥–ª—É—à–µ–Ω:',
          value: message.author.tag,
        },
        {
          name: '–î–∞—Ç–∞:',
          value: message.createdAt,
        },
        {
          name: '–ü—Ä–∏—á–∏–Ω–∞:',
          value: reason,
        }
      );
    message.channel.send({
      embeds: [muteEmbed],
    });
  }
});

// !kick
bot.on('messageCreate', async (message) => {
  if (triggerCommand(message, 'kick')) {
    let args = message.content.split(' ').slice(1);
    let kickedMember = message.guild.members.cache.get(
      message.guild.members.cache.find(
        (m) => m.user.username === args[0] || m.id === args[0]
      ).id || message.mentions.users.first().id
    );
    if (!kickedMember)
      return message.channel.send('–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    if (!kickedMember.kickable)
      return message.channel.send(
        '–ù–µ –º–æ–≥—É –≤—ã–≥–Ω–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤.'
      );
    if (
      !message.member.permissions.has('KICK_MEMBERS') &&
      message.author.id !== kickedMember.id
    )
      return message.channel.send('–£ —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ');
    if (
      kickedMember.permissions.has('MANAGE_MESSAGES') &&
      message.author.id !== kickedMember.id
    )
      return message.channel.send('–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–∏–∫–Ω—É—Ç');
    let reason = args.slice(1).join(' ');
    kickedMember.send(
      `${message.author.username} –∫–∏–∫–Ω—É–ª –≤–∞—Å —Å —Å–µ—Ä–≤–µ—Ä–∞ ¬´${message.guild}¬ª –ø–æ –ø—Ä–∏—á–∏–Ω–µ: ${reason}`
    );
    logToChannel(
      `${message.author.username} –∫–∏–∫–Ω—É–ª ${kickedMember.user.username} –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ ¬´${message.guild}¬ª –ø–æ –ø—Ä–∏—á–∏–Ω–µ: ${reason}`
    );
    await kickedMember.kick(reason);
    const kickEmbed = new Discord.MessageEmbed()
      .setColor(lineColor)
      .setTitle('–ö–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
      .setTimestamp()
      .setFooter(footerText)
      .addFields(
        {
          name: '–ö–∏–∫–Ω—É—Ç—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:',
          value: kickedMember.user.tag,
        },
        {
          name: '–ë—ã–ª –∫–∏–∫–Ω—É—Ç:',
          value: message.author.tag,
        },
        {
          name: '–î–∞—Ç–∞:',
          value: message.createdAt,
        },
        {
          name: '–ü—Ä–∏—á–∏–Ω–∞:',
          value: reason,
        }
      );
    message.channel.send({
      embeds: [kickEmbed],
    });
  }
});

// !ban
bot.on('messageCreate', async (message) => {
  if (triggerCommand(message, 'ban')) {
    let args = message.content.split(' ').slice(1);
    let bannedMember = message.guild.members.cache.get(
      message.guild.members.cache.find(
        (m) => m.user.username === args[0] || m.id === args[0]
      ).id || message.mentions.users.first().id
    );
    if (!bannedMember) return message.channel.send('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    if (!bannedMember.bannable)
      return message.channel.send(
        '–ù–µ –º–æ–≥—É –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤.'
      );
    if (
      !message.member.permissions.has('BAN_MEMBERS') &&
      message.author.id !== bannedMember.id
    )
      return message.channel.send('–£ —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ');
    if (
      bannedMember.permissions.has('MANAGE_MESSAGES') &&
      message.author.id !== bannedMember.id
    )
      return message.channel.send(
        '–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'
      );
    let reason = args.slice(1).join(' ');
    bannedMember.send(
      `${message.author.username} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –≤–∞—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ ¬´${message.guild}¬ª –ø–æ –ø—Ä–∏—á–∏–Ω–µ: ${reason}`
    );
    logToChannel(
      `${message.author.username} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª ${bannedMember.user.username} –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ ¬´${message.guild}¬ª –ø–æ –ø—Ä–∏—á–∏–Ω–µ: ${reason}`
    );
    await bannedMember.ban({
      reason: reason,
    });
    const banEmbed = new Discord.MessageEmbed()
      .setColor(lineColor)
      .setTitle('–ë–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
      .setTimestamp()
      .setFooter(footerText)
      .addFields(
        {
          name: '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:',
          value: bannedMember.user.tag,
        },
        {
          name: '–ë—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω:',
          value: message.author.tag,
        },
        {
          name: '–î–∞—Ç–∞:',
          value: message.createdAt,
        },
        {
          name: '–ü—Ä–∏—á–∏–Ω–∞:',
          value: reason,
        }
      );
    message.channel.send({
      embeds: [banEmbed],
    });
  }
});

// !avatar
bot.on('messageCreate', async (message) => {
  if (triggerCommand(message, 'avatar')) {
    let args = message.content.split(' ').slice(1);
    let member = message.guild.members.cache.get(
      message.mentions.users.first().id ||
        message.guild.members.cache.find(
          (m) => m.user.username == args[0] || m.id == args[0]
        ).id
    );
    message.channel.send(
      member.user.displayAvatarURL({
        dynamic: true,
        size: 1024,
      })
    );
  }
});

// !userinfo
bot.on('messageCreate', async (message) => {
  if (triggerCommand(message, 'userinfo')) {
    let args = message.content.split(' ').slice(1);
    let member = message.guild.members.cache.get(
      message.mentions.users.first().id ||
        message.guild.members.cache.find(
          (m) => m.user.username == args[0] || m.id == args[0]
        ).id
    );
    let user = member.user;
    let nickname = member.nickname;
    if (nickname == null) {
      nickname = member.user.username;
    }
    const userEmbed = new Discord.MessageEmbed()
      .setColor(lineColor)
      .setTitle('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ')
      .setThumbnail(
        user.displayAvatarURL({
          dynamic: true,
          size: 1024,
        })
      )
      .setTimestamp()
      .setFooter(footerText)
      .addFields(
        {
          name: ':globe_with_meridians: –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:',
          value: `
            **–ò–º—è:** *${user.username}#${user.discriminator}*
            **ID:** *${user.id}*
            **–°–æ–∑–¥–∞–Ω:** *${formatDate(user.createdAt)}*
          `,
        },
        {
          name: ':map: –ù–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ:',
          value: `
            **–ù–∏–∫–Ω–µ–π–º:** *${nickname}*
            **–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è:** *${formatDate(member.joinedAt)}*
          `,
        }
      );
    message.channel.send({
      embeds: [userEmbed],
    });
  }
});

// !serverinfo
bot.on('messageCreate', async (message) => {
  if (triggerCommand(message, 'serverinfo')) {
    const guild = message.guild;
    const regions = {
      russia: ':flag_ru: –†–æ—Å—Å–∏—è',
      india: 'flag_in: –ò–Ω–¥–∏—è',
      japan: ':flag_ja: –Ø–ø–æ–Ω–∏—è',
      brasil: ':flag_br: –ë—Ä–∞–∑–∏–ª–∏—è',
      'us-west': ':flag_us: –ó–∞–ø–∞–¥ –°–®–ê',
      hongkong: ':flag_hk: –ì–æ–Ω–∫–æ–Ω–≥',
      southafrica: ':flag_za: –Æ–∂–Ω–∞—è –ê—Ñ—Ä–∏–∫–∞',
      sydney: ':flag_au: –°–∏–¥–Ω–µ–π',
      europe: ':flag_eu: –ï–≤—Ä–æ–ø–∞',
      singapore: ':flag_sg: –°–∏–Ω–≥–∞–ø—É—Ä',
      'us-central': ':flag_us: –¶–µ–Ω—Ç—Ä –°–®–ê',
      'us-south': ':flag_us: –Æ–≥ –°–®–ê',
      'us-east': ':flag_us: –í–æ—Å—Ç–æ–∫ –°–®–ê',
    };
    const guildOwner = guild.members.cache.get(guild.ownerId);
    const serverEmbed = new Discord.MessageEmbed()
      .setColor(lineColor)
      .setTitle('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ')
      .setThumbnail(
        guild.iconURL({
          dynamic: true,
          size: 1024,
        })
      )
      .setTimestamp()
      .setFooter(footerText)
      .addFields(
        {
          name: ':globe_with_meridians: –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:',
          value: `
            **–ù–∞–∑–≤–∞–Ω–∏–µ:** *${guild.name}*
            **ID:** *${guild.id}*
            **–°–æ–∑–¥–∞–Ω:** *${formatDate(guild.createdAt)}*
            **–í–ª–∞–¥–µ–ª–µ—Ü:** *${guildOwner.user.username}*
            **–†–µ–≥–∏–æ–Ω:** *${regions[guild.region]}*
          `,
        },
        {
          name: ':mens: –£—á–∞—Å—Ç–Ω–∏–∫–∏:',
          value: `
            **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:** *${guild.memberCount}*
            **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–æ–ª–µ–π:** *${guild.roles.cache.size}*
            **–£—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–≤–µ—Ä–∫–∏:** *${guild.mfaLevel}*
            **–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å:** *${formatDate(message.member.joinedAt)}*
          `,
        }
      );
    message.channel.send({
      embeds: [serverEmbed],
    });
  }
});

// !gr
/*bot.on('messageCreate', async (message) => {
  if (
    triggerCommand(message, 'rickroll') &&
    message.member.permissions.has('MANAGE_ROLES')
  ) {
    await message.delete();
    const args = message.content.split(' ').slice(1);
    /*var member;
    try {
      member = message.guild.members.cache.get(
        message.mentions.users.first().id
      );
    } catch (e) {
      member = message.guild.members.cache.get(
        message.guild.members.cache.find(
          (m) => m.user.username === args[0] || m.id === args[0]
        ).userId
      );
    }
    let member = message.guild.members.cache.get(
      message.mentions.users.first().id ||
      message.guild.members.cache.find(
        (m) => m.user.username === args[0] || m.id === args[0]
      ).userId
    );
    let member = message.guild.members.cache.get(
      message.guild.members.cache.find(
        (m) => m.user.username === args[0] || m.id === args[0]
      ).id || message.mentions.users.first().id
    );
    let role = message.guild.roles.cache.find(
      (r) => r.name === args.slice(1).join(' ')
    );
    member.roles.add(role.id);
  }
});

// !rr
bot.on('messageCreate', async (message) => {
  if (
    triggerCommand(message, 'rickroll') &&
    message.member.permissions.has('MANAGE_ROLES')
  ) {
    await message.delete();
    let args = message.content.split(' ').slice(1);
    let member = message.guild.members.cache.get(
      message.guild.members.cache.find(
        (m) => m.user.username === args[0] || m.id === args[0]
      ).id || message.mentions.users.first().id
    );
    let role = message.guild.roles.cache.find(
      (r) => r.name === args.slice(1).join(' ')
    );
    member.roles.remove(role.id);
  }
});*/

// !voting
bot.on('messageCreate', async (message) => {
  if (triggerCommand(message, 'voting')) {
    let args = message.content.split(' ').slice(1);
    let variables = args.join(' ');
    variables = variables.split('|');
    const voteEmbed = new Discord.MessageEmbed()
      .setColor(lineColor)
      .setTitle('–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ')
      .setTimestamp()
      .setFooter(footerText)
      .addFields(
        {
          name: '–û–ø–∏—Å–∞–Ω–∏–µ',
          value: variables[0],
        },
        {
          name: '–í–∞—Ä–∏–∞–Ω—Ç—ã',
          value: variables.slice(1).join('\n'),
        }
      );
    message.channel
      .send({
        embeds: [voteEmbed],
      })
      .then((msg) => {
        let i = 1;
        function reactionLoop() {
          setTimeout(function () {
            if (i === 1) msg.react('1Ô∏è‚É£');
            if (i === 2) msg.react('2Ô∏è‚É£');
            if (i === 3) msg.react('3Ô∏è‚É£');
            if (i === 4) msg.react('4Ô∏è‚É£');
            if (i === 5) msg.react('5Ô∏è‚É£');
            if (i === 6) msg.react('6Ô∏è‚É£');
            if (i === 7) msg.react('7Ô∏è‚É£');
            if (i === 8) msg.react('8Ô∏è‚É£');
            if (i === 9) msg.react('9Ô∏è‚É£');
            if (i === 10) msg.react('0Ô∏è‚É£');
            i++;
            if (i < variables.length) {
              reactionLoop();
            }
          }, 500);
        }
        reactionLoop();
      });
  }
});

// !choise
bot.on('messageCreate', async (message) => {
  if (triggerCommand(message, 'choise')) {
    let args = message.content.split(' ').slice(1);
    message.channel.send(getRandArrElement(args));
  }
});

// !nekos-life
bot.on('messageCreate', async (message) => {
  if (triggerCommand(message, 'nekos-life')) {
    if (!message.channel.nsfw)
      return message.reply(
        '–∫–æ–º–∞–Ω–¥–∞ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –≤ –∫–∞–Ω–∞–ª–µ NSFW.'
      );
    let category = message.content.split(' ').slice(1);
    let resp = await superagent.get(
      `https://nekos.life/api/v2/img/${category}`
    );
    let { body } = await superagent.get(
      `https://nekos.life/api/v2/img/${category}`
    );
    if (body.msg === '404' || resp.statusCode !== 200)
      return message.reply('–Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É –ø–æ —ç—Ç–æ–º—É –∑–∞–ø—Ä–æ—Å—É...');
    const nekoEmbed = new Discord.MessageEmbed()
      .setColor(lineColor)
      .setImage(body.url)
      .setTimestamp()
      .setFooter(footerText);
    message.channel.send({
      embeds: [nekoEmbed],
    });
  }
});

// !wttr
bot.on('messageCreate', async (message) => {
  if (triggerCommand(message, 'wttr')) {
    let args = message.content.split(' ').slice(1);
    let type = args[0];
    let city = args.slice(1).join(' ');
    if (type === 'text') {
      let url = encodeURI(`http://wttr.in/${city}?m&M&format=2&lang=ru`);
      let resp = await superagent.get(url);
      const wttrEmbed = new Discord.MessageEmbed()
        .setColor(lineColor)
        .setTitle(`–ü–æ–≥–æ–¥–∞: ${city}`)
        .setDescription(resp.text)
        .setTimestamp()
        .setFooter(footerText);
      return message.channel.send({
        embeds: [wttrEmbed],
      });
    }
    if (type === 'img') {
      let url = encodeURI(`http://wttr.in/${city}.png?m&M&p&0&Q&lang=ru`);
      const wttrEmbed = new Discord.MessageEmbed()
        .setColor(lineColor)
        .setTitle(`–ü–æ–≥–æ–¥–∞: ${city}`)
        .setImage(url)
        .setTimestamp()
        .setFooter(footerText);
      return message.channel.send({
        embeds: [wttrEmbed],
      });
    }
  }
});

// –ß—Ç–µ–Ω–∏–µ DM
bot.on('messageCreate', async (message) => {
  if (message.channel.type === 'DM') {
    logToChannel(
      `${message.author.tag} –æ—Ç–ø—Ä–∞–≤–∏–ª –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ¬´${message.content}¬ª.`
    );
  }
});

// –í—ã–¥–∞—á–∞ —Ä–æ–ª–µ–π –∏ –∞–≤—Ç–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞ –õ–∞–º–æ—Ä–∞–Ω–µ
bot.on('guildMemberAdd', async (member) => {
  if (member.guild.id !== '664491015914258452') return;
  const noviceRole = member.guild.roles.cache.find(
    (r) => r.name === '–ù–∞—á–∏–Ω–∞—é—â–∏–π'
  );
  await member.roles.add(noviceRole);

  return; //—É–¥–∞–ª–∏—Ç–±
  const noviceButton = new Discord.MessageActionRow().addComponents(
    new Discord.MessageButton()
      .setLabel('–î–∞–≤–∞–π –∫–∞–∫ —Å –Ω–æ–≤–∏—á–∫–æ–º. –ù–∏—á–µ–≥–æ –Ω–µ –∑–Ω–∞—é')
      .setStyle('LINK')
      .setURL('https://lamoraun.fandom.com/ru/wiki/–õ–∞–º–æ—Ä–∞–Ω_–≤–∏–∫–∏')
  );
  const experiencedButton = new Discord.MessageActionRow().addComponents(
    new Discord.MessageButton()
      .setLabel('–î–∞–≤–∞–π –∫–∞–∫ —Å –æ–ø—ã—Ç–Ω—ã–º')
      .setStyle('LINK')
      .setURL('https://forms.gle/DqnNAuS8qDRAm8Qt8')
  );
  member.send({
    content:
      '–ö–æ—Ä–æ—á–µ, –Ω–æ–≤–∏—á–æ–∫. –Ø —Ç–µ–±–µ –æ–≥—Ä–æ–º–Ω—ã–π –∏ —Å–ª–æ–∂–Ω—ã–π –ª–æ—Ä –ø–æ–∫–∞–∂—É –∏ –≤ –±–ª–∞–≥–æ—Ä–æ–¥—Å—Ç–≤–æ –∏–≥—Ä–∞—Ç—å –Ω–µ –±—É–¥—É. –ü—Ä–æ–π–¥—ë—à—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é ‚Äî –∏ –º—ã –≤ —Ä–∞—Å—á—ë—Ç–µ. –ó–∞–æ–¥–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏–º, –∫–∞–∫ –±—ã—Å—Ç—Ä–æ –±–∞—à–∫–∞ –ø–æ—Å–ª–µ –í–ü–ò 1936 –ø—Ä–æ—è—Å–Ω–∏—Ç—Å—è. –ê –ø–æ —Ç–≤–æ–µ–π —Ç–µ–º–µ ‚Äî —Å–µ–π—á–∞—Å —Ä–∞—Å—Å–∫–∞–∂—É.\n–ó–Ω–∞—á–∏—Ç, –≤—ã–±–∏—Ä–∞–π, –∫–∞–∫ –º—ã —Å —Ç–æ–±–æ–π –ø–æ—Å—Ç—É–ø–∏–º: –ª–∏–±–æ —è —Ç–µ–±–µ —Å–µ–π—á–∞—Å –º–æ–∑–≥–∏ –±—É–¥—É –ø–∞—Ä–∏—Ç—å, –∫–∞–∫ –æ–±—ã—á–Ω–æ –≤—Å–µ–º –Ω–æ–≤–∏—á–∫–∞–º –¥–µ–ª–∞—é, –ª–∏–±–æ –∫–∞–∫ —Å –æ–ø—ã—Ç–Ω—ã–º —Ä–æ–ª–µ–≤–∏–∫–æ–º ‚Äî –ø–æ–ª—É—á–∞–µ—à—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –∏ –≤–ø–µ—Ä—ë–¥.',
    components: [noviceButton, experiencedButton],
  });
});

// –°—Å—ã–ª–∫–∏ –Ω–∞ –≤–∏–∫–∏ –Ω–∞ –õ–∞–º–æ—Ä–∞–Ω–µ
bot.on('messageCreate', async (message) => {
  if (message.author.bot) return;
  if (
    message.content.includes('[[') &&
    message.content.includes(']]') &&
    message.guild.id === '664491015914258452'
  ) {
    let help = 0;
    let link = [];
    for (let symbol of message.content.split('')) {
      if (help === 5) {
        message.channel.send(
          `<https://lamoraun.fandom.com/ru/wiki/${link.join('')}>`
        );
        help = 0;
        link = [];
      }
      if (help === 2 && symbol === ']') {
        help = 5;
      }
      if (help === 2 && symbol !== ']') {
        if (symbol === ' ') {
          symbol = '_';
        }
        link.push(symbol);
      }
      if (symbol === '[' && help === 1) {
        help = 2;
      }
      if (symbol === '[' && help === 0) {
        help = 1;
      }
    }
  }
});

// //////////////////////////////////////////////////////
// //////////////Games///////////////////////////////////
// //////////////////////////////////////////////////////
const kmaps = Object.keys(maps);
const vmaps = Object.values(maps);
const kflags = Object.keys(flags);
const vflags = Object.values(flags);
let cell,
  chan,
  game = 0;

bot.on('messageCreate', async (message) => {
  if (message.author.bot) return;
  if (
    message.channel.id === chan &&
    !message.content.startsWith(prefix + 'game')
  ) {
    if (game === 'map') {
      for (let i of vmaps[cell]) {
        if (message.content.includes(i)) {
          cell, chan, (game = 0);
          return message.reply('–ø—Ä–∞–≤–∏–ª—å–Ω–æ!');
        }
      }
      return message.reply('–Ω–µ–≤–µ—Ä–Ω–æ!');
    }
    if (game === 'flag') {
      for (let i of vflags[cell]) {
        if (message.content.includes(i)) {
          cell, chan, (game = 0);
          return message.reply('–ø—Ä–∞–≤–∏–ª—å–Ω–æ!');
        }
      }
      return message.reply('–Ω–µ–≤–µ—Ä–Ω–æ!');
    }
  }
});

bot.on('messageCreate', async (message) => {
  if (triggerCommand(message, 'game')) {
    chan = message.channel.id;
    let args = message.content.split(' ').slice(1);
    if (args[0] === 'map-state') {
      game = 'map';
      cell = getRandArrIndex(kmaps);
      const gameEmbed = new Discord.MessageEmbed()
        .setColor(lineColor)
        .setTitle('–ò–≥—Ä–∞ ¬´–ö–∞—Ä—Ç–∞ ‚Äî –°—Ç—Ä–∞–Ω–∞¬ª')
        .setImage(kmaps[cell])
        .setTimestamp()
        .setFooter(footerText);
      message.channel.send({
        embeds: [gameEmbed],
      });
    }
    if (args[0] === 'flag-state') {
      game = 'flag';
      cell = getRandArrIndex(kflags);
      const gameEmbed = new Discord.MessageEmbed()
        .setColor(lineColor)
        .setTitle('–ò–≥—Ä–∞ ¬´–§–ª–∞–≥ ‚Äî –°—Ç—Ä–∞–Ω–∞¬ª')
        .setImage(kflags[cell])
        .setTimestamp()
        .setFooter(footerText);
      message.channel.send({
        embeds: [gameEmbed],
      });
    }
  }
});

///////////////////////////////////
//////////////// Slashes //////////
///////////////////////////////////
bot.once('ready', async () => {
  const data = [
    {
      name: 'help',
      description: '–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ.',
    },
    {
      name: 'invite',
      description: '–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –±–æ—Ç–∞.',
    },
    {
      name: 'roll',
      description: '–í—ã–¥–∞—ë—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ.',
      options: [
        {
          name: 'number',
          type: 'INTEGER',
          description: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.',
          required: false,
        },
      ],
    },
    {
      name: 'dice',
      description: '–ö–∏–¥–∞–µ—Ç –∫—É–±–∏–∫.',
      options: [
        {
          name: 'amount',
          type: 'INTEGER',
          description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–±–∏–∫–æ–≤.',
          required: false,
        },
      ],
    },
    {
      name: 'clean',
      description: '–£–¥–∞–ª—è–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π.',
      options: [
        {
          name: 'amount',
          type: 'INTEGER',
          description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª—è–µ–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.',
          required: true,
        },
      ],
    },
    {
      name: 'meow',
      description: '–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É —Å –∫–æ—Ç–∏–∫–æ–º.',
    },
  ];

  const command = await bot.application?.commands.set(data);
});

// /help
bot.on('interactionCreate', async (interaction) => {
  if (!interaction.isCommand()) return;
  if (interaction.commandName === 'help') {
    const helpEmbed = new Discord.MessageEmbed()
      .setColor(lineColor)
      .setTitle('Opeks')
      .setThumbnail(
        bot.user.displayAvatarURL({
          dynamic: true,
          size: 1024,
        })
      )
      .setTimestamp()
      .setFooter(footerText)
      .addFields(
        {
          name: '–ë–æ—Ç —Å–æ–∑–¥–∞–Ω',
          value: '29 —è–Ω–≤–∞—Ä—è 2020 –≤ 11:39:58 (UTC)',
        },
        {
          name: '–ù–∞–ø–∏—Å–∞–Ω –Ω–∞',
          value: `Node.js: v${pack.engines.node}\nDiscord.js: v${
            Object.values(pack.dependencies)[0]
          }`,
        },
        {
          name: '–•–æ—Å—Ç–∏–Ω–≥',
          value: process.env.HOSTING,
        }
      );
    await interaction.reply({
      content: '–ü—Ä–∏–≤–µ—Ç, —è Opeks! –ß–µ–º –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω?',
      embeds: [helpEmbed],
    });
  }
});

// /invite
bot.on('interactionCreate', async (interaction) => {
  if (!interaction.isCommand()) return;
  if (interaction.commandName === 'invite') {
    const inviteButton = new Discord.MessageActionRow().addComponents(
      new Discord.MessageButton()
        .setLabel('Invite')
        .setStyle('LINK')
        .setURL(
          'https://discord.com/api/oauth2/authorize?client_id=672043257219252224&permissions=8&scope=bot'
        )
    );
    await interaction.reply({
      content:
        'https://tenor.com/view/bots-hobots-buzz-lightyear-toy-story-woody-gif-17120878',
      components: [inviteButton],
    });
  }
});

// /roll
bot.on('interactionCreate', async (interaction) => {
  if (!interaction.isCommand()) return;
  if (interaction.commandName === 'roll') {
    let value = interaction.options.getInteger('option');
    if (value === null) {
      value = 20;
    }
    let result = getRandomInt(value) + 1;
    const rollEmbed = new Discord.MessageEmbed()
      .setColor(lineColor)
      .setTitle(`:game_die: –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ ${value}`)
      .setDescription(`**${result}**`)
      .setTimestamp()
      .setFooter(footerText);
    if (result === value) {
      rollEmbed.setImage(
        'https://media.discordapp.net/attachments/664491015914258460/824896135902134283/Rickrolling.gif'
      );
    }
    await interaction.reply({
      embeds: [rollEmbed],
    });
  }
});

// /dice
bot.on('interactionCreate', async (interaction) => {
  if (!interaction.isCommand()) return;
  if (interaction.commandName === 'dice') {
    let number = interaction.options.getInteger('option');
    let results = [];
    let sum = 0;
    let result;
    if (number > 1 && number < 101) {
      for (let i = 0; i < number; i++) {
        result = getRandomInt(6) + 1;
        sum += result;
        if (result === 1) {
          results[i] = ':one:';
        }
        if (result === 2) {
          results[i] = ':two:';
        }
        if (result === 3) {
          results[i] = ':three:';
        }
        if (result === 4) {
          results[i] = ':four:';
        }
        if (result === 5) {
          results[i] = ':five:';
        }
        if (result === 6) {
          results[i] = ':six:';
        }
      }
      await interaction.reply(
        `–ë—Ä–æ—à–µ–Ω–æ –∫—É–±–∏–∫–æ–≤: ${number}\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã: ${results.join(
          ' '
        )}\n–°—É–º–º–∞: ${sum}`
      );
    }
    if (number === 1 || !number) {
      let result = getRandomInt(6) + 1;
      if (result === 1) {
        result = ':one:';
      }
      if (result === 2) {
        result = ':two:';
      }
      if (result === 3) {
        result = ':three:';
      }
      if (result === 4) {
        result = ':four:';
      }
      if (result === 5) {
        result = ':five:';
      }
      if (result === 6) {
        result = ':six:';
      }
      await interaction.reply(`–ë—Ä–æ—à–µ–Ω –∫—É–±–∏–∫. –†–µ–∑—É–ª—å—Ç–∞—Ç: ${result}`);
    }
  }
});

// /clean
bot.on('interactionCreate', async (interaction) => {
  if (!interaction.isCommand()) return;
  if (interaction.commandName === 'clean') {
    let messCount = interaction.options.getInteger('option');
    let amount = messCount + 1;
    if (amount <= 1 || amount > 100) {
      return interaction.reply('–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 99.');
    }
    if (!interaction.member.permissions.has('MANAGE_MESSAGES')) {
      return interaction.reply('–≤–∞–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è.');
    }
    interaction.channel.bulkDelete(amount, true);
    interaction.channel
      .send(`–£–¥–∞–ª–µ–Ω–æ ${messCount} —Å–æ–æ–±—â–µ–Ω–∏–π!`)
      .then((msg) => setTimeout(() => msg.delete(), 5000));
    logToChannel(
      `${interaction.member.user.username} —É–¥–∞–ª–∏–ª ${amount - 1} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ ${
        interaction.channel.isThread()
          ? `—Ç—Ä–µ–¥–µ ¬´${interaction.channel.name}¬ª –∫–∞–Ω–∞–ª–∞ #${interaction.channel.parent.name}`
          : `–∫–∞–Ω–∞–ª–µ #${interaction.channel.name}`
      } (${interaction.guild}).`
    );
  }
});

// /meow
bot.on('interactionCreate', async (interaction) => {
  if (!interaction.isCommand()) return;
  if (interaction.commandName === 'meow') {
    let { body } = await superagent.get(`https://nekos.life/api/v2/img/meow`);
    const meowEmbed = new Discord.MessageEmbed()
      .setColor(lineColor)
      .setImage(body.url)
      .setTimestamp()
      .setFooter(footerText);
    await interaction.reply({
      embeds: [meowEmbed],
    });
  }
});
